<html>
  <head>
    <title>Leap JavaScript Sample</title>
    <script src="/js/libs/leap-0.6.4.min.js"></script>
    <script src="/js/libs/leap-screenPostion.js"></script>
    <script>// JavaScript code goes here
        // Setup Leap loop with frame callback function
        var controllerOptions = {
            enableGestures: true,
            hand: function(hand){
                //console.log( hand.screenPosition() );
            }
        };
        var previousFrame;
        var appWidth = window.innerWidth;
        var appHeight = window.innerHeight;
        var prevHandPos = [];
        var down = [];

        function vectorToString(vec) {
            return vec.toString();
        }

        Leap.loop(controllerOptions, function(frame) {

            var iBox = frame.interactionBox;

if (frame.hands.length > 0) {
    hand = frame.hands[0];
    var extendedFingers = 0;
        for(var f = 0; f < hand.fingers.length; f++){
            var finger = hand.fingers[f];
            if(finger.extended) extendedFingers++;
        }
    console.log("Extended fingers: " + extendedFingers);
}

            var handPos = [];
            if (frame.pointables.length > 0) {
                for (var i = 0; i < frame.pointables.length; i++) {
                    var pointable = frame.pointables[i];
                    if (handPos[pointable.handId]) continue;

                    var leapPoint = pointable.stabilizedTipPosition;
                    var normalizedPoint = iBox.normalizePoint(leapPoint, true);
                    var appX = normalizedPoint[0] * appWidth - appWidth / 2;
                    var appY = normalizedPoint[1] * appHeight - appHeight / 2;
                    handPos[pointable.handId] = {x: appX, y: appY};
                    console.log("hand " + pointable.handId);
                    if (!down[pointable.handId]) down[pointable.handId] = 0;

                    if (prevHandPos[pointable.handId] && prevHandPos[pointable.handId].y > handPos[pointable.handId].y)
                        down[pointable.handId] ++;
                    else if (prevHandPos[pointable.handId] && prevHandPos[pointable.handId].y < handPos[pointable.handId].y) {
                        if (down[pointable.handId] > 5) {
                            console.log("Boom!");
                            console.log("hand_" + pointable.handId + " " + JSON.stringify(handPos[pointable.handId]));
                        }
                        down[pointable.handId] = 0;
                    }
                    prevHandPos = handPos;
                    //if (righthand == null) console.log("hand1");
                    //else console.log('hand2');
                    //console.log("appX:" + appX + " appY:" + appY);
                }
            }
            // Body of callback function
            var frameString = "Frame ID: " + frame.id  + "<br />"
                + "Timestamp: " + frame.timestamp + " &micro;s<br />"
                + "Hands: " + frame.hands.length + "<br />"
                + "Fingers: " + frame.fingers.length + "<br />"
                + "Tools: " + frame.tools.length + "<br />"
                + "Gestures: " + frame.gestures.length + "<br />";
            
            // Frame motion factors
            if (previousFrame) {
                var translation = frame.translation(previousFrame);
                frameString += "Translation: " + vectorToString(translation) + " mm <br />";

                var rotationAxis = frame.rotationAxis(previousFrame);
                var rotationAngle = frame.rotationAngle(previousFrame);
                frameString += "Rotation axis: " + vectorToString(rotationAxis, 2) + "<br />";
                frameString += "Rotation angle: " + rotationAngle.toFixed(2) + " radians<br />";

                var scaleFactor = frame.scaleFactor(previousFrame);
                frameString += "Scale factor: " + scaleFactor.toFixed(2) + "<br />";
            }
            // Display Hand object data
            var handString = "";
            if (frame.hands.length > 0) {
            for (var i = 0; i < frame.hands.length; i++) {
                var hand = frame.hands[i];

                handString += "Hand ID: " + hand.id + "<br />";
                handString += "Direction: " + vectorToString(hand.direction, 2) + "<br />";
                handString += "Palm normal: " + vectorToString(hand.palmNormal, 2) + "<br />";
                handString += "Palm position: " + vectorToString(hand.palmPosition) + " mm<br />";
                handString += "Palm velocity: " + vectorToString(hand.palmVelocity) + " mm/s<br />";
                handString += "Sphere center: " + vectorToString(hand.sphereCenter) + " mm<br />";
                handString += "Sphere radius: " + hand.sphereRadius.toFixed(1) + " mm<br />";

                // And so on...
            }
            }

            // Display Pointable (finger and tool) object data
            var pointableString = "";
            if (frame.pointables.length > 0) {
                for (var i = 0; i < frame.pointables.length; i++) {
                    var pointable = frame.pointables[i];

                    pointableString += "Pointable ID: " + pointable.id + "<br />";
                    pointableString += "Belongs to hand with ID: " + pointable.handId + "<br />";

                    if (pointable.tool) {
                        pointableString += "Classified as a tool <br />";
                        pointableString += "Length: " + pointable.length.toFixed(1) + " mm<br />";
                        pointableString += "Width: "  + pointable.width.toFixed(1) + " mm<br />";
                    }
                    else {
                        pointableString += "Classified as a finger<br />";
                        pointableString += "Length: " + pointable.length.toFixed(1) + " mm<br />";
                    }

                    pointableString += "Direction: " + vectorToString(pointable.direction, 2) + "<br />";
                    pointableString += "Tip position: " + vectorToString(pointable.tipPosition) + " mm<br />";
                    pointableString += "Tip velocity: " + vectorToString(pointable.tipVelocity) + " mm/s<br />";
                }
            }

            // Display Gesture object data
            var gestureString = "";
            if (frame.gestures.length > 0) {
                for (var i = 0; i < frame.gestures.length; i++) {
                    var gesture = frame.gestures[i];
                    gestureString += "Gesture ID: " + gesture.id + ", "
                                + "type: " + gesture.type + ", "
                                + "state: " + gesture.state + ", "
                                + "hand IDs: " + gesture.handIds.join(", ") + ", "
                                + "pointable IDs: " + gesture.pointableIds.join(", ") + ", "
                                + "duration: " + gesture.duration + " &micro;s, ";

                    // switch (gesture.type) {
                    //     case "circle":
                    //         gestureString += "center: " + vectorToString(gesture.center) + " mm, "
                    //                     + "normal: " + vectorToString(gesture.normal, 2) + ", "
                    //                     + "radius: " + gesture.radius.toFixed(1) + " mm, "
                    //                     + "progress: " + gesture.progress.toFixed(2) + " rotations";
                    //         break;
                    //     case "swipe":
                    //         gestureString += "start position: " + vectorToString(gesture.startPosition) + " mm, "
                    //                     + "current position: " + vectorToString(gesture.position) + " mm, "
                    //                     + "direction: " + vectorToString(gesture.direction, 2) + ", "
                    //                     + "speed: " + gesture.speed.toFixed(1) + " mm/s";
                    //         break;
                    //     case "screenTap":
                    //     case "keyTap":
                    //         gestureString += "position: " + vectorToString(gesture.position) + " mm, "
                    //                     + "direction: " + vectorToString(gesture.direction, 2);
                    //         break;
                    //     default:
                    //         gestureString += "unknown gesture type";
                    // }
                    gestureString += "<br />";
                    if (gesture.type == "screenTap" || gesture.type == "keyTap") {
                        // console.log("boom! " + gesture.state + " " + gesture.id);
                        // for (let i = 0; i < gesture.handIds.length; i++) {
                        //     console.log("hand_" + gesture.handIds[i] + " " + JSON.stringify(handPos[gesture.handIds[i]]));
                        // }
                        // break;
                    }
                        
                }
            }
            previousFrame = frame;

            var frameData = document.getElementById('frameData');
            //frameData.innerHTML = frameString;

            var handData = document.getElementById('handData');
            //handData.innerHTML = handString;

            var pointableData = document.getElementById('pointableData');
            //pointableData.innerHTML = pointableString;

            var gestureData = document.getElementById('gestureData');
            //gestureData.innerHTML = gestureString;

        }).use('screenPosition');
    

    </script>
  </head>
  <body>
    <h1>Leap JavaScript Sample</h1>
    <div id="main">
      <h3>Frame data:</h3>
      <div id="frameData"></div>
      <div style="clear:both;"></div>
      <h3>Hand data:</h3>
      <div id="handData"></div>
      <div style="clear:both;"></div>
      <h3>Finger and tool data:</h3>
      <div id="pointableData"></div>
      <div style="clear:both;"></div>
      <h3>Gesture data:</h3>
      <div id="gestureData"></div>
    </div>
  </body>
</html>